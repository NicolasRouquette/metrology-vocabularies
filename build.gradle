/* 
 * The Gradle task dependencies 
 */
buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
  		// https://github.com/opencaesar/owl-adapter/tags
  		classpath 'io.opencaesar.adapters:oml2owl-gradle:1.0.+'
  		
  		// https://github.com/opencaesar/oml-tools/tags
    	classpath 'io.opencaesar.oml:oml-merge-gradle:1.1.+'
  		classpath 'io.opencaesar.oml:oml-bikeshed-gradle:1.1.+'
  		
  		// https://github.com/opencaesar/owl-tools/tags
  		classpath 'io.opencaesar.owl:owl-load-gradle:+'
  		classpath 'io.opencaesar.owl:owl-reason-gradle:+'
  		classpath 'io.opencaesar.owl:owl-fuseki:+'
  		classpath 'io.opencaesar.owl:owl-fuseki-gradle:+'
  		classpath 'io.opencaesar.owl:owl-query-gradle:+'
	}
}

plugins {
  id 'com.palantir.git-version' version '0.12.3'
}

apply from: "${rootDir}/gradle/maven-deployment.gradle"


/* 
 * Dataset maven coordinates
 */
ext.title = 'Metrology Vocabularies'
description ='Metrology vocabularies from bipm.org, iso/iec iso-80000, and supporting ISO-704, ISO-1087 terminological analysis'
group = 'io.opencaesar.ontologies'
version = gitVersion()

/*
 * Properties
 */
ext.bikeshed = 'build/gradle'

/*
 * The repositories to look up OML dependencies in
 */
repositories {
	mavenLocal()
	mavenCentral()
}

/*
 * The configuration of OML dependencies
 */
configurations {
    oml
}

/*
 * The OML dependencies
 */
dependencies {
	oml "io.opencaesar.ontologies:core-vocabularies:$coreVersion"
}

/*
 * A task to extract and merge the OML dependencies
 */
task downloadDependencies(type:io.opencaesar.oml.merge.OmlMergeTask, group:"oml") {
    inputZipPaths = configurations.oml.files
    outputCatalogFolder = file('build/oml')
}

/*
 * A task to generate Bikeshed specification for the OML catalog
 */
task copyDiagrams(type: Copy) {
    from 'diagrams'
    into 'build/bikeshed/diagrams'
}

task omlToBikeshed(type: io.opencaesar.oml.bikeshed.Oml2BikeshedTask, group:"oml", dependsOn: [downloadDependencies, copyDiagrams]) {
    // OML catalog
    inputCatalogPath = file('catalog.xml')
    // OML catalog title
    inputCatalogTitle = project.title
    // OML catalog version
    inputCatalogVersion = project.version
    // OWL folder
    outputFolderPath = file("$bikeshed")
    // Publish URL
    publishUrl = "$dataset_publishUrl".toString()
}

/*
 * A task to generate the model documentation in HTML
 */
import org.gradle.internal.os.OperatingSystem
task generateDocs(dependsOn: omlToBikeshed) {
	inputs.files(fileTree("$bikeshed").include('**/*.bs'))
	outputs.files(fileTree("$bikeshed").include('**/*.html'))
    doLast {
        if (OperatingSystem.current().isWindows()) {
            exec { commandLine "$bikeshed/publish.bat" }
        } else {
            exec { commandLine "$bikeshed/publish.sh" }
        }
    }
}

/*
 * A task to convert the OML catalog to OWL catalog
 * downloadDependencies is excluded because it does not behave incrementally.
 */
task omlToOwl(type:io.opencaesar.oml2owl.Oml2OwlTask, group:"oml", dependsOn: downloadDependencies) {
    // OML catalog
    inputCatalogPath = file('catalog.xml')
    // OWL catalog
    outputCatalogPath = file('build/owl/catalog.xml')
    outputFileExtension = 'owl'
}

task owlReasonIso80000(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = 'http://iso.org/iso-80000-bundle'
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
		'http://iso.org/iso-80000-bundle/classes = ALL_SUBCLASS',
		'http://iso.org/iso-80000-bundle/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY',
		'http://iso.org/iso-80000-bundle/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS'
	]
	// Junit error report
	reportPath = file('build/reports/owl/iso-80000-bundle/reasoning.xml')
}

task owlReasonVIM4(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: omlToOwl) {
  	// OWL catalog
  	catalogPath = file('build/owl/catalog.xml')
  	// Input ontology IRI to reason on
  	inputOntologyIri = 'http://bipm.org/jcgm/jcgm-bundle'
  	// Entailment statements to generate and the ontologies to persist them in
  	specs = [
    	'http://bipm.org/jcgm/jcgm-bundle/classes = ALL_SUBCLASS',
    	'http://bipm.org/jcgm/jcgm-bundle/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY',
    	'http://bipm.org/jcgm/jcgm-bundle/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS'
  	]
  	// Junit error report
  	reportPath = file('build/reports/owl/jcgm-bundle/reasoning.xml')
}

task owlReasonCompleteDescription(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: omlToOwl) {
  	// OWL catalog
  	catalogPath = file('build/owl/catalog.xml')
  	// Input ontology IRI to reason on
  	inputOntologyIri = 'http://example.org/complete-description-bundle'
  	// Entailment statements to generate and the ontologies to persist them in
  	specs = [
    	'http://example.org/complete-description-bundle/classes = ALL_SUBCLASS',
    	'http://example.org/complete-description-bundle/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY',
    	'http://example.org/complete-description-bundle/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS'
  	]
  	// Junit error report
  	reportPath = file('build/reports/owl/complete-description-bundle/reasoning.xml')
}

/*
 * Start the headless Fuseki server
 */
task startFuseki(type: io.opencaesar.owl.fuseki.StartFusekiTask, group:"oml") {
    configurationPath = file('.fuseki.ttl')
    outputFolderPath = file('.fuseki')
    webUI = true
}

/*
 * Stop the headless Fuseki server
 */
task stopFuseki(type: io.opencaesar.owl.fuseki.StopFusekiTask, group:"oml") {
    outputFolderPath = file('.fuseki')
}

/*
 * A task to load the iso80000 dataset to a Fuseki dataset endpoint
 */
 
task owlLoadCompleteDescription(type:io.opencaesar.owl.load.OwlLoadTask, group:"oml", dependsOn: owlReasonCompleteDescription) {
    catalogPath = file('build/owl/catalog.xml')
    endpointURL = "http://localhost:3030/metrology-vocabularies".toString()
    fileExtensions = ['owl', 'ttl']
    iris = [
    	'http://example.org/complete-description-bundle/classes',
    	'http://example.org/complete-description-bundle/properties',
    	'http://example.org/complete-description-bundle/individuals',
    ]
}

/*
 * A task to run a set of SPARQL queries on a Fuseki dataset endpoint
 */
task owlQuery(type:io.opencaesar.owl.query.OwlQueryTask, group:"oml", dependsOn: owlLoadCompleteDescription) {
    endpointURL = "http://localhost:3030/metrology-vocabularies".toString()
    queryPath = file('src/sparql')
    resultPath = file('build/frames')
}

/*
 * A task to build the project, which executes several tasks together
 */
tasks.named('build') {
    group "oml"
    dependsOn owlReasonIso80000
    dependsOn owlReasonVIM4
}

/*
 * A task to delete the build artifacts
 */
tasks.named('clean') {
    group "oml"
}

/*
 * Publish artifact to maven
 */
task omlZip(type: Zip, group:"oml") {
    from file('src/oml')
    include "**/*.oml"
    destinationDirectory = file('build/libs')
    archiveBaseName = project.name
    archiveVersion = project.version
}

publishing.publications.maven.artifact omlZip

/*
 * Integration with the Eclipse IDE
 */ 
apply plugin: 'eclipse'

eclipse {
    synchronizationTasks downloadDependencies
}