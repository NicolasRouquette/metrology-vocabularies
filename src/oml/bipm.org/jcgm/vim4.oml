vocabulary <http://bipm.org/jcgm/vim4#> as vim4 {

  extends <http://purl.org/dc/elements/1.1/> as dc
  extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs
  extends <http://www.w3.org/2002/07/owl#> as owl
  extends <http://www.w3.org/2001/XMLSchema#> as xsd

  @rdfs:label "IdentifiedElement"
  aspect IdentifiedElement 
  [ key id ]
  
  @rdfs:label "id"
  scalar property id [
    domain IdentifiedElement
    range xsd:string
    functional
  ]
  
  @rdfs:label "Rational Exponent"
  aspect RationalExponent 
  [ restricts scalar property exponent to exactly 1 owl:rational ]

  @rdfs:label "exponent"
  scalar property exponent [
    domain RationalExponent
    range owl:rational
    functional
  ]
  
  @rdfs:label "HasCoherence"
  aspect HasCoherence 
  
  @rdfs:label "isCoherent"
  @rdfs:isDefinedBy "[VIM4 CD: 1.12 and 1.14]"
  scalar property isCoherent [
    domain HasCoherence
    range xsd:boolean
    functional
  ]
  
  @rdfs:label "general quantity"
  @rdfs:label "kind of quantity"
  @rdfs:isDefinedBy "[VIM4 CD: 1.1]"
  @dc:^description "property whose instances can be compared by ratio or only by order"
  @rdfs:comment """General quantity in [VIM4 CD: 1.1] corresponds precisely to kind-of-quantity in [OonP: S.13.3.1].
  """
  aspect GeneralQuantity :> IdentifiedElement
  
  @rdfs:label "general unitary quantity"
  @rdfs:isDefinedBy "[VIM4 CD: 1.1 - 1.30]"
  @dc:^description "general quantity whose instances can be compared by ratio"
  concept GeneralUnitaryQuantity :> GeneralQuantity
  
  @rdfs:label "Specializes"
  relation entity Specializes [
    from GeneralUnitaryQuantity
    to GeneralUnitaryQuantity
    @rdfs:label "specializes"
    forward specializes
    asymmetric
    irreflexive
  ]
  
  rule SpecializesTransitivity 
  [ specializes(a,b) ^ specializes(b,c) -> specializes(a,c) ]
  
  @rdfs:label "general ordinal quantity"
  @rdfs:isDefinedBy "[VIM4 CD: 1.30]"
  @dc:^description "general quantity whose instances can be compared by order but not by ratio"
  concept GeneralOrdinalQuantity :> GeneralQuantity
  
  @rdfs:label "individual quantity"
  @rdfs:isDefinedBy "[VIM4 CD: 1.2]"
  @dc:^description "instance of a general quantity"
  @rdfs:comment """Individual quantity in [VIM4 CD: 1.2] corresponds precisely to quantity in [OonP: S.12.13].
  [OonP: S.5.5] defines property as an 'inherent state- or process-descriptive feature of a system (S.3.3) including any pertinent components (S.3.4)'.
  """
  aspect IndividualQuantity :> IdentifiedElement
  
  @rdfs:label "individual unitary quantity"
  @rdfs:isDefinedBy "[VIM4 CD: 1.2 - 1.31]"
  @dc:^description "instance of a general unitary quantity"
  concept IndividualUnitaryQuantity :> IndividualQuantity [
    restricts all relation instantiates to GeneralUnitaryQuantity
  ]
  
  @rdfs:label "individual ordinal quantity"
  @rdfs:isDefinedBy "[VIM4 CD: 1.31]"
  @dc:^description "instance of a general ordinal quantity"
  concept IndividualOrdinalQuantity :> IndividualQuantity [
    restricts all relation instantiates to GeneralOrdinalQuantity
  ]
  
  @rdfs:label "Ordinal Scale Comparison"
  @rdfs:isDefinedBy "[VIM4 CD: 1.32]"
  relation entity OrdinalScaleComparison [
    from IndividualOrdinalQuantity
    to IndividualOrdinalQuantity
    forward ordinalScaleComparison
  ]
  
  @rdfs:label "Less Than"
  @rdfs:comment "Asserted when the source is less than the target."
  relation entity LessThan :> OrdinalScaleComparison [
    from IndividualOrdinalQuantity
    to IndividualOrdinalQuantity
    forward lessThan
    asymmetric
    irreflexive
  ]

  rule LessThanTransitivity [ lessThan(m1, m2) ^ lessThan(m2, m3) -> lessThan(m1, m3) ]
  
  @rdfs:label "Greater Than"
  @rdfs:comment "Asserted when the source is greater than the target."
  relation entity GreaterThan :> OrdinalScaleComparison [
    from IndividualOrdinalQuantity
    to IndividualOrdinalQuantity
    forward greaterThan
    asymmetric
    irreflexive
  ]

  rule GreaterThanTransitivity [ greaterThan(m1, m2) ^ greaterThan(m2, m3) -> greaterThan(m1, m3) ]

  @rdfs:label "Equals"
  relation entity Equals :> OrdinalScaleComparison [
    from IndividualOrdinalQuantity
    to IndividualOrdinalQuantity
    forward equals
    symmetric
    reflexive
  ]

  rule EqualsTransitivity [ equals(m1, m2) ^ equals(m2, m3) -> equals(m1, m3) ]
  rule LessThanEqualsTransitivity [ lessThan(m1, m2) ^ equals(m2, m3) -> lessThan(m1, m3) ]
  rule EqualsLessThanTransitivity [ equals(m1, m2) ^ lessThan(m2, m3) -> lessThan(m1, m3) ]
  rule GreaterThanEqualsTransitivity [ greaterThan(m1, m2) ^ equals(m2, m3) -> greaterThan(m1, m3) ]
  rule EqualsGreaterThanTransitivity [ equals(m1, m2) ^ greaterThan(m2, m3) -> greaterThan(m1, m3) ]
  
  @rdfs:label "Instantiates"
  relation entity Instantiates [
    from IndividualQuantity
    to GeneralQuantity
    @rdfs:label "instantiates"
    forward instantiates
    functional
  ]
  
  rule InstantiatesSpecializesTransitivity 
  [ instantiates(i,g1) ^ specializes(g1,g2) -> instantiates(i,g2) ]
  
  @rdfs:label "system of quantities"
  @rdfs:isDefinedBy "[VIM4 CD: 1.3]"
  @dc:^description "set of quantities together with a set of non-contradictory equations relating those quantities."
  @rdfs:comment """system of quantities in [VIM4 CD: 1.3, Note 2] corresponds precisely to system of unitary kinds-ef-quantity in [OonP: S.13.7]."""
  concept SystemOfQuantities :> IdentifiedElement
  
  @rdfs:label "System Has Unitary Quantity"
  @rdfs:isDefinedBy "[VIM4 CD: 1.3 Note 1]"
  @dc:source "system of unitary kinds-of-quantity [OonP: S.13.7, p 129]"
  relation entity SystemHasUnitaryQuantity [
    from SystemOfQuantities
    to GeneralUnitaryQuantity
    @rdfs:label "system has unitary quantity"
    forward systemHasUnitaryQuantity
  ]
  
  @rdfs:label "System Has Base Unitary Quantity"
  @rdfs:isDefinedBy "[VIM4 CD: 1.4]"
  @dc:^description """quantity in a conventionally chosen subset of a given system of quantities,
  where no quantity in the set of base quantities can be expressed in terms of the others."""
  @dc:source "system of unitary kinds-of-quantity [OonP: S.13.7, p 129]"
  relation entity SystemHasBaseUnitaryQuantity :> SystemHasUnitaryQuantity [
    from SystemOfQuantities
    to GeneralUnitaryQuantity
    @rdfs:label "system has base unitary quantity"
    forward systemHasBaseUnitaryQuantity
  ]
  
  scalar property dimensionSymbol [
    domain SystemHasBaseUnitaryQuantity
    range xsd:string
    functional
  ]
  
  @rdfs:label "System Has Derived Unitary Quantity"
  @rdfs:isDefinedBy "[VIM4 CD: 1.5]"
  @dc:^description """quantity, in a system of quantities, defined in terms of the base quantities of that system."""
  @dc:source "base unitary kind-of-quantity [OonP: S.13.11]"
  relation entity SystemHasDerivedUnitaryQuantity :> SystemHasUnitaryQuantity, HasCoherence [
    from SystemOfQuantities
    to GeneralUnitaryQuantity
    @rdfs:label "system has derived unitary quantity"
    forward systemHasDerivedUnitaryQuantity
  ]
  
  @rdfs:label "Has Power Of Unitary Quantity Factor"
  @rdfs:isDefinedBy "[VIM4 CD: 1.5]"
  relation entity HasPowerOfUnitaryQuantityFactor :> RationalExponent [
    from SystemHasDerivedUnitaryQuantity
    to SystemHasUnitaryQuantity
    @rdfs:label "has Power Of Unitary Quantity Factor"
    forward hasPowerOfUnitaryQuantityFactor
  ]
  
  rule DerivationDefinedWithinTheSameSystemOfQuantities [
    hasPowerOfUnitaryQuantityFactor(d, f) ^
    SystemHasDerivedUnitaryQuantity(ds, d, dq) ^
    SystemHasUnitaryQuantity(fs, f, fq)
    ->
    sameAs(ds, fs)
  ]
  
  @rdfs:label "Has Quantity Dimension"
  @rdfs:isDefinedBy "[VIM4 CD: 1.7]"
  relation entity HasQuantityDimension :> RationalExponent [
    from SystemHasUnitaryQuantity
    to SystemHasBaseUnitaryQuantity
    @rdfs:label "system has derived unitary quantity"
    forward hasQuantityDimension
  ]
  
  rule DimensionDefinedWithinTheSameSystemOfQuantities [
    hasQuantityDimension(d, b) ^
    SystemHasUnitaryQuantity(ds, d, dq) ^
    SystemHasBaseUnitaryQuantity(bs, b, bq)
    ->
    sameAs(ds, bs)
  ]
  
  @rdfs:label "isDimensionless"
  @rdfs:isDefinedBy "[VIM4 CD: 1.8]"
  scalar property isDimensionless [
    domain SystemHasDerivedUnitaryQuantity
    range xsd:boolean
    functional
  ]
 
  @rdfs:label "system of units"
  @rdfs:isDefinedBy "[VIM4 CD: 1.13]"
  @dc:^description """set of base units and derived units, together with their multiples and submultiples, 
  defined in accordance with given rules, for a given system of quantities."""
  concept SystemOfUnits :> IdentifiedElement, HasCoherence [
    restricts relation given to exactly 1 SystemOfQuantities
  ]
  
  @rdfs:label "Given"
  @rdfs:isDefinedBy "[VIM4 CD: 1.13]"
  relation entity Given [
    from SystemOfUnits
    to SystemOfQuantities
    @rdfs:label "given"
    forward given
    functional
  ]
  
  aspect InherentQuantity
  
  @rdfs:label "Object"
  @rdfs:isDefinedBy "[OonP: S.2.23]"
  aspect Object
  
  @rdfs:label "Inheres"
  @rdfs:isDefinedBy "[OonP: Figure 2.25]"
  @rdfs:comment """Inheres corresponds to the associative relationship shown in [OonP: Figure 2.25] between object and property.
  """
  relation entity Inheres [
    from InherentQuantity
    to Object
    @rdfs:label "inheres"
    forward inheres
    functional
  ]
  
  
  @rdfs:label "QuantityValue"
  @rdfs:isDefinedBy "[VIM4 CD: 1.20]"
  aspect QuantityValue
  
  @rdfs:label "IsAttributedTo"
  @rdfs:isDefinedBy "[VIM4 CD: 1.23, 2.1, 2.8, 2.10, 3.1, 6.5, 6.10]"
  relation entity IsAttributedTo [
    from QuantityValue
    to InherentQuantity
    @rdfs:label "isAttributedTo"
    forward isAttributedTo
    functional
  ]
  
  @rdfs:label "InherentOrdinalQuantity"
  @rdfs:isDefinedBy "[VIM4 CD: 1.31]"
  concept InherentOrdinalQuantity :> IndividualOrdinalQuantity, InherentQuantity [
    restricts relation inheres to exactly 1 Object
  ]
  
  @rdfs:label "OrdinalQuantityValue"
  @rdfs:isDefinedBy "[VIM4 CD: 1.33]"
  concept OrdinalQuantityValue :> IndividualOrdinalQuantity, QuantityValue
  
  scalar property ordinalPosition [
    domain OrdinalQuantityValue
    range xsd:positiveInteger
    functional
  ]
  
  @rdfs:label "InherentUnitaryQuantity"
  @rdfs:isDefinedBy "[VIM4 CD: 1.2 except for the cases of Note 1]"
  concept InherentUnitaryQuantity :> IndividualUnitaryQuantity, InherentQuantity [
    restricts relation inheres to exactly 1 Object
  ]
  
  @rdfs:label "UnitaryQuantityValue"
  @rdfs:isDefinedBy "[VIM4 CD: 1.20 for an IndividualUnitaryQuantity]"
  concept UnitaryQuantityValue :> IndividualUnitaryQuantity, QuantityValue [
    restricts relation unit to exactly 1 MeasurementUnit
  ]
  
  @rdfs:label "HasUnit"
  @rdfs:isDefinedBy "[VIM4 CD: 1.20 for an IndividualUnitaryQuantity]"
  relation entity HasUnit [
    from UnitaryQuantityValue
    to MeasurementUnit
    @rdfs:label "hasUnit"
    forward unit
    functional
  ]
  
  @rdfs:label "hasDoubleNumber"
  @rdfs:isDefinedBy "[VIM4 CD: 1.20 for an IndividualUnitaryQuantity]"
  scalar property hasDoubleNumber [
    domain UnitaryQuantityValue
    range xsd:double
    functional
  ]
  
  @rdfs:label "MeasurementUnit"
  @rdfs:isDefinedBy "[VIM4 CD: 1.9]"
  concept MeasurementUnit :> IndividualUnitaryQuantity
  
  @rdfs:label "Multiple"
  @rdfs:isDefinedBy "[VIM4 CD: 1.17 and 1.18]"
  concept Multiple :> IdentifiedElement
  
  @rdfs:label "HasMultiple"
  @rdfs:isDefinedBy "[VIM4 CD: 1.17, 1.18]"
  relation entity HasMultiple [
    from MeasurementUnit
    to Multiple
    @rdfs:label "hasMultiple"
    forward hasMultiple
    functional
  ]
  
  @rdfs:label "IsMultipleOf"
  @rdfs:isDefinedBy "[VIM4 CD: 1.17, 1.18]"
  relation entity IsMultipleOf [
    from MeasurementUnit
    to MeasurementUnit
    @rdfs:label "isMultipleOf"
    forward isMultipleOf
    functional
  ]
  
  @rdfs:label "UnprefixedMeasurementUnit"
  @rdfs:isDefinedBy "[VIM4 CD: 1.9 except for 1.17 and 1.18]"
  concept UnprefixedMeasurementUnit :> MeasurementUnit [
    restricts relation hasMultiple to exactly 0 Multiple
    restricts relation isMultipleOf to exactly 0 MeasurementUnit
  ]
  
  @rdfs:label "PrefixedMeasurementUnit"
  @rdfs:isDefinedBy "[VIM4 CD: 1.17 or 1.18]"
  concept PrefixedMeasurementUnit :> MeasurementUnit [
    restricts relation hasMultiple to exactly 1 Multiple
    restricts relation isMultipleOf to exactly 1 MeasurementUnit
  ]
  
  @rdfs:label "System Has Unit"
  @rdfs:isDefinedBy "[VIM4 CD: 1.13]"
  relation entity SystemHasUnit [
    from SystemOfUnits
    to MeasurementUnit
    @rdfs:label "system has unit"
    forward systemHasUnit
  ]
  
  @rdfs:label "System Has Base Unit"
  @rdfs:isDefinedBy "[VIM4 CD: 1.13]"
  relation entity SystemHasBaseUnit :> SystemHasUnit [
    from SystemOfUnits
    to MeasurementUnit
    @rdfs:label "system has base unit"
    forward systemHasBaseUnit
  ]
  
  @rdfs:label "System Has Derived Unit"
  @rdfs:isDefinedBy "[VIM4 CD: 1.13]"
  relation entity SystemHasDerivedUnit :> SystemHasUnit, SystemDerivedUnitScope [
    from SystemOfUnits
    to MeasurementUnit
    @rdfs:label "system has derived unit"
    forward systemHasDerivedUnit
  ]
  
  @rdfs:label "SystemDerivedUnitScope"
  @rdfs:isDefinedBy "[VIM4 CD: 1.15]"
  aspect SystemDerivedUnitScope 
  
  @rdfs:label "Is Off-System Unit"
  @rdfs:isDefinedBy "[VIM4 CD: 1.15]"
  scalar property isOffSystemUnit [
    domain SystemDerivedUnitScope
    range xsd:boolean
    functional
  ]
  
  
  @rdfs:label "Has Power Of Unit Factor"
  @rdfs:isDefinedBy "[VIM4 CD: 1.12]"
  relation entity HasPowerOfUnitFactor :> RationalExponent [
    from SystemHasDerivedUnit
    to SystemHasUnit
    @rdfs:label "has Power Of Unit Factor"
    forward hasPowerOfUnitFactor
  ]
  
  rule DerivationDefinedWithinTheSameSystemOfUnits [
    hasPowerOfUnitFactor(d, f) ^
    SystemHasDerivedUnit(ds, d, du) ^
    SystemHasUnit(fs, f, fu)
    ->
    sameAs(ds, fs)
  ]
  
  @rdfs:label "Measurement"
  @rdfs:isDefinedBy "[VIM4 CD: 2.1]"
  concept Measurement :> IdentifiedElement
  
  @rdfs:label "MeasurementPrinciple"
  @rdfs:isDefinedBy "[VIM4 CD: 2.4]"
  concept MeasurementPrinciple :> IdentifiedElement
  
  @rdfs:label "MeasurementMethod"
  @rdfs:isDefinedBy "[VIM4 CD: 2.5]"
  concept MeasurementMethod :> IdentifiedElement
  
  @rdfs:label "MeasurementProcedure"
  @rdfs:isDefinedBy "[VIM4 CD: 2.7]"
  concept MeasurementProcedure :> IdentifiedElement
  
  @rdfs:label "Describes"
  @rdfs:isDefinedBy "[VIM4 CD: 2.7]"
  relation entity Describes [
    from MeasurementProcedure
    to Measurement
    @rdfs:label "describes"
    forward describes
    functional
  ]
  
  @rdfs:label "MeasurementModel"
  @rdfs:isDefinedBy "[VIM4 CD: 2.12]"
  concept MeasurementModel :> IdentifiedElement
  
  @rdfs:label "Per"
  @rdfs:isDefinedBy "[VIM4 CD: 2.4, 2.7]"
  relation entity Per [
    from MeasurementProcedure
    to MeasurementPrinciple 
    @rdfs:label "per"
    forward per
  ]
  
  @rdfs:label "UsesOperationsOf"
  @rdfs:isDefinedBy "[VIM4 CD: 2.5]"
  relation entity UsesOperationsOf [
    from MeasurementProcedure
    to MeasurementMethod 
    @rdfs:label "usesOperationsOf"
    forward usesOperationsOf
    functional
  ]
  
  @rdfs:label "IsBasedOn"
  @rdfs:isDefinedBy "[VIM4 CD: 2.7]"
  relation entity IsBasedOn [
    from MeasurementProcedure
    to MeasurementModel 
    @rdfs:label "isBasedOn"
    forward isBasedOn
    functional
  ]
  
  @rdfs:label "HasInput"
  @rdfs:isDefinedBy "[VIM4 CD: 2.14]"
  relation entity HasInput [
    from MeasurementModel
    to IndividualQuantity
    @rdfs:label "hasInput"
    forward hasInput
  ]
  
  @rdfs:label "Measures"
  @rdfs:isDefinedBy "[VIM4 CD: 2.3, 2.15]"
  relation entity Measures [
    from MeasurementModel
    to IndividualQuantity
    @rdfs:label "measures"
    forward measures
    functional
  ]

  @rdfs:label "IsInfluencedBy"
  @rdfs:isDefinedBy "[VIM4 CD: 2.16]"
  relation entity IsInfluencedBy [
    from MeasurementModel
    to IndividualQuantity
    @rdfs:label "isInfluencedBy"
    forward isInfluencedBy
  ]
  
  @rdfs:label "UsesCorrection"
  @rdfs:isDefinedBy "[VIM4 CD: 2.17]"
  relation entity UsesCorrection [
    from MeasurementModel
    to IndividualQuantity
    @rdfs:label "usesCorrection"
    forward usesCorrection
  ]
  
  @rdfs:label "YieldsMeasuredValue"
  @rdfs:isDefinedBy "[VIM4 CD: 2.14]"
  relation entity YieldsMeasuredValue [
    from MeasurementModel
    to QuantityValue
    @rdfs:label "yieldsMeasuredValue"
    forward yieldsMeasuredValue
  ]
  
  @rdfs:label "MeasurementUncertainty"
  @rdfs:isDefinedBy "[VIM4 CD: 3.1]"
  concept MeasurementUncertainty
  
  @rdfs:label "YieldsMeasurementUncertainty"
  @rdfs:isDefinedBy "[VIM4 CD: 3.1]"
  relation entity YieldsMeasurementUncertainty [
    from MeasurementModel
    to MeasurementUncertainty
    @rdfs:label "yieldsMeasurementUncertainty"
    forward yieldsMeasurementUncertainty
    functional
  ]
}