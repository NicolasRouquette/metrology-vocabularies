@dc:creator "Jet Propulsion Laboratory"
@dc:rights """Copyright 2010-2020, by the California Institute of Technology. ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged. Any commercial use must be negotiated with the Office of Technology Transfer at the California Institute of Technology. 
This software may be subject to U.S. export control laws. By accepting this software, the user agrees to comply with all applicable U.S. export laws and regulations. User has the responsibility to obtain export licenses, or other export authority as may be required before exporting such information to foreign countries or providing access to foreign persons."""
@dc:^description "Optional consistency rules for iso-80000-3-quantities to enforce that derived quantities are about the same object as the objects of their quantity factors."
@dc:title "ISO iso-80000-3 Rules"
vocabulary <http://iso.org/iso-80000-3-rules> with # as iso-80000-3-rules {
	
	extends <http://iso.org/iso-80000-3-quantities>

	// 3-5

	@dc:^description "
	If an angular-measure, x, is derived from an arc-length, y, and a radius, z,
	then x, y, and z must be quantities about the same object."
	rule angular-measure-derivation-consistency [
		// x is the angular-measure quantity of an object, xo.
		metrology:isQuantityOf(x,xo) ^
		iso-80000-3-quantities:angular-measure(x) ^

		// y is the arc-length quantity of an object, yo.
		metrology:isQuantityOf(y,yo) ^
		iso-80000-3-quantities:arc-length(y) ^

		// z is the radius quantity of an object, zo. 
		metrology:isQuantityOf(z,zo) ^
		iso-80000-3-quantities:radius(z) ^

		// if there is a dimensional calculus constraint relating x as a derived from y and z
		iso-80000-3-quantities:angular-measure-has-arc-length(x,y) ^
		iso-80000-3-quantities:angular-measure-has-radius(x,z)
	
		->

		// then all the quantities must be about the same object.
		sameAs(xo,yo) ^ sameAs(xo,zo)
	]

	// 3-6

	@dc:^description "
	If a rotational-displacement, x, is derived from a path-length, y, and a distance, z,
	then x, y, and z must be quantities about the same object."
	rule rotational-displacement-derivation-consistency [
		// x is the rotational-displacement quantity of an object, xo.
		metrology:isQuantityOf(x,xo) ^
		iso-80000-3-quantities:rotational-displacement(x) ^

		// y is the path-length quantity of an object, yo.
		metrology:isQuantityOf(y,yo) ^
		iso-80000-3-quantities:path-length(y) ^

		// z is the distance quantity of an object, zo. 
		metrology:isQuantityOf(z,zo) ^
		iso-80000-3-quantities:distance(z) ^

		// if there is a dimensional calculus constraint relating x as derived from y and z
		iso-80000-3-quantities:rotational-displacement-has-path-length(x,y) ^
		iso-80000-3-quantities:rotational-displacement-has-distance(x,z)
	
		->

		// then all the quantities must be about the same object.
		sameAs(xo,yo) ^ sameAs(xo,zo)
	]
	
	// 3-10

	@dc:^description "
	If a velocity, x, is derived from a position-vector, y, and a duration, z,
	then x, y, and z must be quantities of the same object."
	rule velocity-derivation-consistency [
		// x is the velocity quantity of an object, xo.
		metrology:isQuantityOf(x,xo) ^
		iso-80000-3-quantities:velocity(x) ^

		// y is the position-vector quantity of an object, yo.
		metrology:isQuantityOf(y,yo) ^
		iso-80000-3-quantities:position-vector(y) ^

		// z is the duration quantity of an object, zo.
		metrology:isQuantityOf(z,zo) ^
		iso-80000-3-quantities:duration(z) ^

		// if there is a dimensional calculus constraint relating x as a derived from y and z
		iso-80000-3-quantities:velocity-has-position-vector(x,y) ^
		iso-80000-3-quantities:velocity-has-duration(x,z)
	
		->

		// then all the quantities must be of the same object.
		sameAs(xo,yo) ^ sameAs(xo,zo)
	]
	
	// 3-12

	@dc:^description "
	If an angular-velocity, x, is derived from a rotational-displacement, y, and a duration, z,
	then x, y, and z must be quantities of the same object."
	rule angular-velocity-derivation-consistency [
		// x is the velocity quantity of an object, xo.
		metrology:isQuantityOf(x,xo) ^
		iso-80000-3-quantities:angular-velocity(x) ^

		// y is the rotational-displacement quantity of an object, yo.
		metrology:isQuantityOf(y,yo) ^
		iso-80000-3-quantities:rotational-displacement(y) ^

		// z is the duration quantity of an object, zo.
		metrology:isQuantityOf(z,zo) ^
		iso-80000-3-quantities:duration(z) ^

		// if there is a dimensional calculus constraint relating x as a derived from y and z
		iso-80000-3-quantities:angular-velocity-has-rotational-displacement(x,y) ^
		iso-80000-3-quantities:angular-velocity-has-duration(x,z)
	
		->

		// then all the quantities must be of the same object.
		sameAs(xo,yo) ^ sameAs(xo,zo)
	]

	// 3-16

	@dc:^description "
	If a rotation, x, is derived from a rotational-displacement, y,
	then x and y must be quantities of the same object."
	rule rotation-derivation-consistency [
		// x is the rotation quantity of an object, xo.
		metrology:isQuantityOf(x,xo) ^
		iso-80000-3-quantities:velocity(x) ^

		// y is the rotational-displacement quantity of an object, yo.
		metrology:isQuantityOf(y,yo) ^
		iso-80000-3-quantities:position-vector(y) ^

		// if there is a dimensional calculus constraint relating x as a derived from y
		iso-80000-3-quantities:rotation-has-rotational-displacement(x,y)
	
		->

		// then all the quantities must be of the same object.
		sameAs(xo,yo)
	]

	// 3-17

	@dc:^description "
	If a frequency, x, is derived from a period-duration, y,
	then x and y must be quantities of the same object."
	rule frequency-derivation-consistency [
		// x is the frequency quantity of an object, xo.
		metrology:isQuantityOf(x,xo) ^
		iso-80000-3-quantities:frequency(x) ^

		// y is the period-duration quantity of an object, yo.
		metrology:isQuantityOf(y,yo) ^
		iso-80000-3-quantities:period-duration(y) ^

		// if there is a dimensional calculus constraint relating x as a derived from y
		iso-80000-3-quantities:rotation-has-rotational-displacement(x,y)
	
		->

		// then all the quantities must be of the same object.
		sameAs(xo,yo)
	]

	@dc:^description "
	If a rotational-frequency, x, is derived from a rotation, y, and a duration, z,
	then x, y, and z must be quantities of the same object."
	rule rotational-frequency-derivation-consistency [
		// x is the rotational-frequency quantity of an object, xo.
		metrology:isQuantityOf(x,xo) ^
		iso-80000-3-quantities:rotational-frequency(x) ^

		// y is the rotation quantity of an object, yo.
		metrology:isQuantityOf(y,yo) ^
		iso-80000-3-quantities:rotation(y) ^

		// z is the duration quantity of an object, zo.
		metrology:isQuantityOf(z,zo) ^
		iso-80000-3-quantities:duration(z) ^

		// if there is a dimensional calculus constraint relating x as a derived from y and z
		iso-80000-3-quantities:rotational-frequency-has-rotation(x,y) ^
		iso-80000-3-quantities:rotational-frequency-has-duration(x,z)
	
		->

		// then all the quantities must be of the same object.
		sameAs(xo,yo) ^ sameAs(xo,zo)
	]
}
